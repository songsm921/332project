// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package sorting.sorting


object SortServiceGrpc {
  val METHOD_SORT_SAY_HELLO: _root_.io.grpc.MethodDescriptor[sorting.sorting.SortRequest, sorting.sorting.SortReply] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("sorting.SortService", "SortSayHello"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[sorting.sorting.SortRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[sorting.sorting.SortReply])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(sorting.sorting.SortingProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("sorting.SortService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(sorting.sorting.SortingProto.javaDescriptor))
      .addMethod(METHOD_SORT_SAY_HELLO)
      .build()
  
  /** The greeting service definition.
    */
  trait SortService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = SortService
    /** Sends a greeting
      */
    def sortSayHello(request: sorting.sorting.SortRequest): scala.concurrent.Future[sorting.sorting.SortReply]
  }
  
  object SortService extends _root_.scalapb.grpc.ServiceCompanion[SortService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[SortService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = sorting.sorting.SortingProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = sorting.sorting.SortingProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: SortService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_SORT_SAY_HELLO,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[sorting.sorting.SortRequest, sorting.sorting.SortReply] {
          override def invoke(request: sorting.sorting.SortRequest, observer: _root_.io.grpc.stub.StreamObserver[sorting.sorting.SortReply]): _root_.scala.Unit =
            serviceImpl.sortSayHello(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  /** The greeting service definition.
    */
  trait SortServiceBlockingClient {
    def serviceCompanion = SortService
    /** Sends a greeting
      */
    def sortSayHello(request: sorting.sorting.SortRequest): sorting.sorting.SortReply
  }
  
  class SortServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[SortServiceBlockingStub](channel, options) with SortServiceBlockingClient {
    /** Sends a greeting
      */
    override def sortSayHello(request: sorting.sorting.SortRequest): sorting.sorting.SortReply = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SORT_SAY_HELLO, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): SortServiceBlockingStub = new SortServiceBlockingStub(channel, options)
  }
  
  class SortServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[SortServiceStub](channel, options) with SortService {
    /** Sends a greeting
      */
    override def sortSayHello(request: sorting.sorting.SortRequest): scala.concurrent.Future[sorting.sorting.SortReply] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SORT_SAY_HELLO, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): SortServiceStub = new SortServiceStub(channel, options)
  }
  
  object SortServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[SortServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): SortServiceStub = new SortServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[SortServiceStub] = this
  }
  
  def bindService(serviceImpl: SortService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = SortService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): SortServiceBlockingStub = new SortServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): SortServiceStub = new SortServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = sorting.sorting.SortingProto.javaDescriptor.getServices().get(0)
  
}