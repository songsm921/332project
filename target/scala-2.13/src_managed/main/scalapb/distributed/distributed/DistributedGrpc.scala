// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package distributed.distributed


object DistributedGrpc {
  val METHOD_GET_PARTITION: _root_.io.grpc.MethodDescriptor[distributed.distributed.PartitionRequest, distributed.distributed.PartitionResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("distributed.Distributed", "getPartition"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.PartitionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.PartitionResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_REQUEST_DATA: _root_.io.grpc.MethodDescriptor[distributed.distributed.DataRequest, distributed.distributed.DataResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("distributed.Distributed", "requestData"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.DataRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.DataResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_SEND_DATA: _root_.io.grpc.MethodDescriptor[distributed.distributed.DataRequest, distributed.distributed.DataResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("distributed.Distributed", "sendData"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.DataRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.DataResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("distributed.Distributed")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(distributed.distributed.DistributedProto.javaDescriptor))
      .addMethod(METHOD_GET_PARTITION)
      .addMethod(METHOD_REQUEST_DATA)
      .addMethod(METHOD_SEND_DATA)
      .build()
  
  trait Distributed extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = Distributed
    def getPartition(request: distributed.distributed.PartitionRequest): scala.concurrent.Future[distributed.distributed.PartitionResponse]
    def requestData(request: distributed.distributed.DataRequest): scala.concurrent.Future[distributed.distributed.DataResponse]
    def sendData(request: distributed.distributed.DataRequest): scala.concurrent.Future[distributed.distributed.DataResponse]
  }
  
  object Distributed extends _root_.scalapb.grpc.ServiceCompanion[Distributed] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[Distributed] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = distributed.distributed.DistributedProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: Distributed, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_GET_PARTITION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[distributed.distributed.PartitionRequest, distributed.distributed.PartitionResponse] {
          override def invoke(request: distributed.distributed.PartitionRequest, observer: _root_.io.grpc.stub.StreamObserver[distributed.distributed.PartitionResponse]): _root_.scala.Unit =
            serviceImpl.getPartition(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_REQUEST_DATA,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[distributed.distributed.DataRequest, distributed.distributed.DataResponse] {
          override def invoke(request: distributed.distributed.DataRequest, observer: _root_.io.grpc.stub.StreamObserver[distributed.distributed.DataResponse]): _root_.scala.Unit =
            serviceImpl.requestData(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND_DATA,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[distributed.distributed.DataRequest, distributed.distributed.DataResponse] {
          override def invoke(request: distributed.distributed.DataRequest, observer: _root_.io.grpc.stub.StreamObserver[distributed.distributed.DataResponse]): _root_.scala.Unit =
            serviceImpl.sendData(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait DistributedBlockingClient {
    def serviceCompanion = Distributed
    def getPartition(request: distributed.distributed.PartitionRequest): distributed.distributed.PartitionResponse
    def requestData(request: distributed.distributed.DataRequest): distributed.distributed.DataResponse
    def sendData(request: distributed.distributed.DataRequest): distributed.distributed.DataResponse
  }
  
  class DistributedBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[DistributedBlockingStub](channel, options) with DistributedBlockingClient {
    override def getPartition(request: distributed.distributed.PartitionRequest): distributed.distributed.PartitionResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_PARTITION, options, request)
    }
    
    override def requestData(request: distributed.distributed.DataRequest): distributed.distributed.DataResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_REQUEST_DATA, options, request)
    }
    
    override def sendData(request: distributed.distributed.DataRequest): distributed.distributed.DataResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_DATA, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): DistributedBlockingStub = new DistributedBlockingStub(channel, options)
  }
  
  class DistributedStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[DistributedStub](channel, options) with Distributed {
    override def getPartition(request: distributed.distributed.PartitionRequest): scala.concurrent.Future[distributed.distributed.PartitionResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_PARTITION, options, request)
    }
    
    override def requestData(request: distributed.distributed.DataRequest): scala.concurrent.Future[distributed.distributed.DataResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_REQUEST_DATA, options, request)
    }
    
    override def sendData(request: distributed.distributed.DataRequest): scala.concurrent.Future[distributed.distributed.DataResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_DATA, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): DistributedStub = new DistributedStub(channel, options)
  }
  
  object DistributedStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[DistributedStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): DistributedStub = new DistributedStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[DistributedStub] = this
  }
  
  def bindService(serviceImpl: Distributed, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = Distributed.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): DistributedBlockingStub = new DistributedBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): DistributedStub = new DistributedStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0)
  
}