// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package distributed.distributed


object DistributedGrpc {
  val METHOD_CONNECTION_CHECK: _root_.io.grpc.MethodDescriptor[distributed.distributed.ConnectionCheckRequest, distributed.distributed.ConnectionCheckResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("distributed.Distributed", "connectionCheck"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.ConnectionCheckRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.ConnectionCheckResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_GET_SAMPLE_RANGE: _root_.io.grpc.MethodDescriptor[distributed.distributed.SampleRequest, distributed.distributed.SampleResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("distributed.Distributed", "getSampleRange"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.SampleRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.SampleResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_REQUEST_PARTITIONED_DATA: _root_.io.grpc.MethodDescriptor[distributed.distributed.PartitionedDataRequest, distributed.distributed.PartitionedDataResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("distributed.Distributed", "requestPartitionedData"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.PartitionedDataRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.PartitionedDataResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_SEND_PARTITIONED_DATA: _root_.io.grpc.MethodDescriptor[distributed.distributed.PartitionedData, distributed.distributed.IsSendingDone] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("distributed.Distributed", "sendPartitionedData"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.PartitionedData])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.IsSendingDone])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_TASK_DONE_REPORT: _root_.io.grpc.MethodDescriptor[distributed.distributed.DoneRequest, distributed.distributed.DoneResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("distributed.Distributed", "taskDoneReport"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.DoneRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[distributed.distributed.DoneResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("distributed.Distributed")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(distributed.distributed.DistributedProto.javaDescriptor))
      .addMethod(METHOD_CONNECTION_CHECK)
      .addMethod(METHOD_GET_SAMPLE_RANGE)
      .addMethod(METHOD_REQUEST_PARTITIONED_DATA)
      .addMethod(METHOD_SEND_PARTITIONED_DATA)
      .addMethod(METHOD_TASK_DONE_REPORT)
      .build()
  
  trait Distributed extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = Distributed
    def connectionCheck(request: distributed.distributed.ConnectionCheckRequest): scala.concurrent.Future[distributed.distributed.ConnectionCheckResponse]
    def getSampleRange(request: distributed.distributed.SampleRequest): scala.concurrent.Future[distributed.distributed.SampleResponse]
    def requestPartitionedData(request: distributed.distributed.PartitionedDataRequest): scala.concurrent.Future[distributed.distributed.PartitionedDataResponse]
    def sendPartitionedData(request: distributed.distributed.PartitionedData): scala.concurrent.Future[distributed.distributed.IsSendingDone]
    def taskDoneReport(request: distributed.distributed.DoneRequest): scala.concurrent.Future[distributed.distributed.DoneResponse]
  }
  
  object Distributed extends _root_.scalapb.grpc.ServiceCompanion[Distributed] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[Distributed] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = distributed.distributed.DistributedProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: Distributed, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_CONNECTION_CHECK,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[distributed.distributed.ConnectionCheckRequest, distributed.distributed.ConnectionCheckResponse] {
          override def invoke(request: distributed.distributed.ConnectionCheckRequest, observer: _root_.io.grpc.stub.StreamObserver[distributed.distributed.ConnectionCheckResponse]): _root_.scala.Unit =
            serviceImpl.connectionCheck(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_GET_SAMPLE_RANGE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[distributed.distributed.SampleRequest, distributed.distributed.SampleResponse] {
          override def invoke(request: distributed.distributed.SampleRequest, observer: _root_.io.grpc.stub.StreamObserver[distributed.distributed.SampleResponse]): _root_.scala.Unit =
            serviceImpl.getSampleRange(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_REQUEST_PARTITIONED_DATA,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[distributed.distributed.PartitionedDataRequest, distributed.distributed.PartitionedDataResponse] {
          override def invoke(request: distributed.distributed.PartitionedDataRequest, observer: _root_.io.grpc.stub.StreamObserver[distributed.distributed.PartitionedDataResponse]): _root_.scala.Unit =
            serviceImpl.requestPartitionedData(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND_PARTITIONED_DATA,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[distributed.distributed.PartitionedData, distributed.distributed.IsSendingDone] {
          override def invoke(request: distributed.distributed.PartitionedData, observer: _root_.io.grpc.stub.StreamObserver[distributed.distributed.IsSendingDone]): _root_.scala.Unit =
            serviceImpl.sendPartitionedData(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_TASK_DONE_REPORT,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[distributed.distributed.DoneRequest, distributed.distributed.DoneResponse] {
          override def invoke(request: distributed.distributed.DoneRequest, observer: _root_.io.grpc.stub.StreamObserver[distributed.distributed.DoneResponse]): _root_.scala.Unit =
            serviceImpl.taskDoneReport(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait DistributedBlockingClient {
    def serviceCompanion = Distributed
    def connectionCheck(request: distributed.distributed.ConnectionCheckRequest): distributed.distributed.ConnectionCheckResponse
    def getSampleRange(request: distributed.distributed.SampleRequest): distributed.distributed.SampleResponse
    def requestPartitionedData(request: distributed.distributed.PartitionedDataRequest): distributed.distributed.PartitionedDataResponse
    def sendPartitionedData(request: distributed.distributed.PartitionedData): distributed.distributed.IsSendingDone
    def taskDoneReport(request: distributed.distributed.DoneRequest): distributed.distributed.DoneResponse
  }
  
  class DistributedBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[DistributedBlockingStub](channel, options) with DistributedBlockingClient {
    override def connectionCheck(request: distributed.distributed.ConnectionCheckRequest): distributed.distributed.ConnectionCheckResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CONNECTION_CHECK, options, request)
    }
    
    override def getSampleRange(request: distributed.distributed.SampleRequest): distributed.distributed.SampleResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_SAMPLE_RANGE, options, request)
    }
    
    override def requestPartitionedData(request: distributed.distributed.PartitionedDataRequest): distributed.distributed.PartitionedDataResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_REQUEST_PARTITIONED_DATA, options, request)
    }
    
    override def sendPartitionedData(request: distributed.distributed.PartitionedData): distributed.distributed.IsSendingDone = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND_PARTITIONED_DATA, options, request)
    }
    
    override def taskDoneReport(request: distributed.distributed.DoneRequest): distributed.distributed.DoneResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_TASK_DONE_REPORT, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): DistributedBlockingStub = new DistributedBlockingStub(channel, options)
  }
  
  class DistributedStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[DistributedStub](channel, options) with Distributed {
    override def connectionCheck(request: distributed.distributed.ConnectionCheckRequest): scala.concurrent.Future[distributed.distributed.ConnectionCheckResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CONNECTION_CHECK, options, request)
    }
    
    override def getSampleRange(request: distributed.distributed.SampleRequest): scala.concurrent.Future[distributed.distributed.SampleResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_SAMPLE_RANGE, options, request)
    }
    
    override def requestPartitionedData(request: distributed.distributed.PartitionedDataRequest): scala.concurrent.Future[distributed.distributed.PartitionedDataResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_REQUEST_PARTITIONED_DATA, options, request)
    }
    
    override def sendPartitionedData(request: distributed.distributed.PartitionedData): scala.concurrent.Future[distributed.distributed.IsSendingDone] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND_PARTITIONED_DATA, options, request)
    }
    
    override def taskDoneReport(request: distributed.distributed.DoneRequest): scala.concurrent.Future[distributed.distributed.DoneResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_TASK_DONE_REPORT, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): DistributedStub = new DistributedStub(channel, options)
  }
  
  object DistributedStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[DistributedStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): DistributedStub = new DistributedStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[DistributedStub] = this
  }
  
  def bindService(serviceImpl: Distributed, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = Distributed.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): DistributedBlockingStub = new DistributedBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): DistributedStub = new DistributedStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = distributed.distributed.DistributedProto.javaDescriptor.getServices().get(0)
  
}