// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package fragment.fragment


object FragServiceGrpc {
  val METHOD_SAY_HELLO: _root_.io.grpc.MethodDescriptor[fragment.fragment.FragRequest, fragment.fragment.FragReply] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("fragment.FragService", "SayHello"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[fragment.fragment.FragRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[fragment.fragment.FragReply])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(fragment.fragment.FragmentProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("fragment.FragService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(fragment.fragment.FragmentProto.javaDescriptor))
      .addMethod(METHOD_SAY_HELLO)
      .build()
  
  /** The greeting service definition.
    */
  trait FragService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = FragService
    /** Sends a greeting
      */
    def sayHello(request: fragment.fragment.FragRequest): scala.concurrent.Future[fragment.fragment.FragReply]
  }
  
  object FragService extends _root_.scalapb.grpc.ServiceCompanion[FragService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[FragService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = fragment.fragment.FragmentProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = fragment.fragment.FragmentProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: FragService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_SAY_HELLO,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[fragment.fragment.FragRequest, fragment.fragment.FragReply] {
          override def invoke(request: fragment.fragment.FragRequest, observer: _root_.io.grpc.stub.StreamObserver[fragment.fragment.FragReply]): _root_.scala.Unit =
            serviceImpl.sayHello(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  /** The greeting service definition.
    */
  trait FragServiceBlockingClient {
    def serviceCompanion = FragService
    /** Sends a greeting
      */
    def sayHello(request: fragment.fragment.FragRequest): fragment.fragment.FragReply
  }
  
  class FragServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[FragServiceBlockingStub](channel, options) with FragServiceBlockingClient {
    /** Sends a greeting
      */
    override def sayHello(request: fragment.fragment.FragRequest): fragment.fragment.FragReply = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SAY_HELLO, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): FragServiceBlockingStub = new FragServiceBlockingStub(channel, options)
  }
  
  class FragServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[FragServiceStub](channel, options) with FragService {
    /** Sends a greeting
      */
    override def sayHello(request: fragment.fragment.FragRequest): scala.concurrent.Future[fragment.fragment.FragReply] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SAY_HELLO, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): FragServiceStub = new FragServiceStub(channel, options)
  }
  
  object FragServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[FragServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): FragServiceStub = new FragServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[FragServiceStub] = this
  }
  
  def bindService(serviceImpl: FragService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = FragService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): FragServiceBlockingStub = new FragServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): FragServiceStub = new FragServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = fragment.fragment.FragmentProto.javaDescriptor.getServices().get(0)
  
}